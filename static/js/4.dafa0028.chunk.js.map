{"version":3,"sources":["services/fetchMovies.js","components/SearchBar/SearchBar.js","pages/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchTrendingMovies","fetch","then","response","ok","json","Promise","reject","Error","results","fetchMoviesById","filmId","fetchMoviesByReviews","fetchMoviesByKeyword","keyword","resp","SearchBar","onSubmit","useState","requestName","setRequestName","e","preventDefault","trim","toast","error","className","s","searchInput","placeholder","value","onChange","currentTarget","toLowerCase","type","searchBtn","Status","MoviesPage","setKeyword","movies","setMovies","status","setStatus","url","useRouteMatch","location","useLocation","history","useHistory","sortQuery","URLSearchParams","search","get","useEffect","API","movie","length","catch","push","Spinner","map","to","pathname","id","state","from","title","autoClose"],"mappings":"yIAAA,8KAAMA,EAAW,gCACXC,EAAU,mCAEhB,SAASC,IACP,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAA0CC,IACnDG,MAAK,SAACC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBAEjCN,MAAK,SAACC,GAAD,OAAcA,EAASM,WAGjC,SAASC,EAAgBC,GACvB,OAAOV,MAAM,GAAD,OAAIH,EAAJ,iBAAqBa,EAArB,oBAAuCZ,IAAWG,MAAK,SAACC,GAClE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBAapC,SAASI,EAAqBD,GAC5B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,iBAAqBa,EAArB,4BAA+CZ,IAAWG,MAAK,SAACC,GAC1E,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBAIpC,SAASK,EAAqBC,GAC5B,OAAOb,MAAM,GAAD,OAAIH,EAAJ,gCAAoCC,EAApC,kBAAqDe,IAC9DZ,MAAK,SAACC,GAAD,OAAcA,EAASE,UAC5BH,MAAK,SAACa,GAAD,OAAUA,EAAKN,a,6LCvCV,SAASO,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAiBA,OACE,uBAAMH,SAZa,SAACI,GAGpB,GAFAA,EAAEC,iBAEyB,KAAvBH,EAAYI,OACd,OAAOC,IAAMC,MAAM,+BAGrBR,EAASE,GACTC,EAAe,KAIf,UACE,uBAAOM,UAAWC,IAAEC,YAAaC,YAAY,uBAAuBC,MAAM,cAAcC,SAjBnE,SAACV,GACxBD,EAAeC,EAAEW,cAAcF,MAAMG,kBAiBnC,wBAAQC,KAAK,SAASR,UAAWC,IAAEQ,UAAnC,uB,YCjBAC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAGG,SAASC,IAAc,IAAD,EACnC,EAA8BnB,mBAAS,IAAvC,mBAAgBoB,GAAhB,WACA,EAA4BpB,mBAAS,MAArC,mBAAOqB,EAAP,KAAeC,EAAf,KACA,EAA4BtB,mBAASkB,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACQC,EAAQC,cAARD,IACFE,EAAWC,cACXC,EAAUC,cACVC,EAAS,UAAG,IAAIC,gBAAgBL,EAASM,QAAQC,IAAI,gBAA5C,QAAwD,GAEvEC,qBAAU,WACHJ,IAKHP,EAAUN,GAEVkB,IAAyBL,GACtB/C,MAAK,SAACqD,GACL,GAAqB,IAAjBA,EAAMC,OAGR,OAFAd,EAAUN,QACVZ,IAAMC,MAAM,sDAGde,EAAUe,GACVb,EAAUN,MAGXqB,OAAM,kBAAMf,EAAUN,SAG1B,CAACa,IAWJ,OACE,qCACE,cAACjC,EAAD,CAAWC,SAXU,SAACH,GACxBwB,EAAWxB,GAEXiC,EAAQW,KAAR,2BACKb,GADL,IAEEM,OAAO,SAAD,OAAWrC,SAQhB2B,IAAWL,GAAkB,cAACuB,EAAA,EAAD,IAE9B,6BACGpB,GACCA,EAAOqB,KAAI,SAACL,GAAD,OACT,6BACE,cAAC,IAAD,CACEM,GAAI,CACFC,SAAS,GAAD,OAAKnB,EAAL,YAAYY,EAAMQ,IAC1BC,MAAO,CACLC,KAAM,CAAEpB,cAJd,SAOGU,EAAMW,SARFX,EAAMQ,SAarB,cAAC,IAAD,CAAgBI,UAAW","file":"static/js/4.dafa0028.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3/\";\r\nconst API_KEY = \"1e1d4e13b76e9f56ba601bf1e8785fb3\";\r\n\r\nfunction fetchTrendingMovies() {\r\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\r\n    .then((response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return Promise.reject(new Error(\"Nothind found\"));\r\n    })\r\n    .then((response) => response.results);\r\n}\r\n\r\nfunction fetchMoviesById(filmId) {\r\n  return fetch(`${BASE_URL}movie/${filmId}?api_key=${API_KEY}`).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(\"Nothind found\"));\r\n  });\r\n}\r\n\r\nfunction fetchMoviesByActors(filmId) {\r\n  return fetch(`${BASE_URL}movie/${filmId}/credits?api_key=${API_KEY}`).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(\"Nothing found\"));\r\n  });\r\n}\r\n\r\nfunction fetchMoviesByReviews(filmId) {\r\n  return fetch(`${BASE_URL}movie/${filmId}/reviews?api_key=${API_KEY}`).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(\"Nothing found\"));\r\n  });\r\n}\r\n\r\nfunction fetchMoviesByKeyword(keyword) {\r\n  return fetch(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${keyword}`)\r\n    .then((response) => response.json())\r\n    .then((resp) => resp.results);\r\n}\r\n\r\nexport { fetchMoviesByActors, fetchMoviesById, fetchMoviesByKeyword, fetchTrendingMovies, fetchMoviesByReviews, API_KEY };\r\n","import { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport s from \"./SearchBar.module.css\";\r\n\r\nexport default function SearchBar({ onSubmit }) {\r\n  const [requestName, setRequestName] = useState(\"\");\r\n\r\n  const handleNameChange = (e) => {\r\n    setRequestName(e.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (requestName.trim() === \"\") {\r\n      return toast.error(\"Please enter a correct name\");\r\n    }\r\n\r\n    onSubmit(requestName);\r\n    setRequestName(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input className={s.searchInput} placeholder=\"Search movie by name\" value=\"requestName\" onChange={handleNameChange}></input>\r\n      <button type=\"submit\" className={s.searchBtn}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Link, useRouteMatch, useHistory, useLocation } from \"react-router-dom\";\r\nimport * as API from \"../services/fetchMovies\";\r\nimport SearchBar from \"../components/SearchBar/SearchBar\";\r\nimport Spinner from \"../components/Spinner/Spinner\";\r\n\r\nconst Status = {\r\n  IDLE: \"idle\",\r\n  PENDING: \"pending\",\r\n  RESOLVED: \"resolved\",\r\n  REJECTED: \"rejected\",\r\n};\r\n\r\nexport default function MoviesPage() {\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [movies, setMovies] = useState(null);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const { url } = useRouteMatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const sortQuery = new URLSearchParams(location.search).get(\"query\") ?? \"\";\r\n\r\n  useEffect(() => {\r\n    if (!sortQuery) {\r\n      return;\r\n    }\r\n\r\n    function moviesApiService() {\r\n      setStatus(Status.PENDING);\r\n\r\n      API.fetchMoviesByKeyword(sortQuery)\r\n        .then((movie) => {\r\n          if (movie.length === 0) {\r\n            setStatus(Status.REJECTED);\r\n            toast.error(\"Something went wrong! Please enter correct request\");\r\n            return;\r\n          }\r\n          setMovies(movie);\r\n          setStatus(Status.RESOLVED);\r\n          // toast.success('Congratulations!')\r\n        })\r\n        .catch(() => setStatus(Status.REJECTED));\r\n    }\r\n    moviesApiService();\r\n  }, [sortQuery]);\r\n\r\n  const handleFormSubmit = (keyword) => {\r\n    setKeyword(keyword);\r\n\r\n    history.push({\r\n      ...location,\r\n      search: `query=${keyword}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchBar onSubmit={handleFormSubmit} />\r\n\r\n      {status === Status.PENDING && <Spinner />}\r\n\r\n      <ul>\r\n        {movies &&\r\n          movies.map((movie) => (\r\n            <li key={movie.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `${url}/${movie.id}`,\r\n                  state: {\r\n                    from: { location },\r\n                  },\r\n                }}>\r\n                {movie.title}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <ToastContainer autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}